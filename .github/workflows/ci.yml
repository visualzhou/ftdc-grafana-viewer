name: ci

on: [push, pull_request]

jobs:
  # Code quality checks only need to run once
  check:
    name: Lints & Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy
      # Skip cache when running locally with act to avoid caching issues
      - uses: Swatinem/rust-cache@v2
        if: ${{ !env.ACT }}
      - run: cargo fmt --all -- --check
      - run: cargo clippy --all-targets -- -D warnings

  # Build and test across multiple platforms
  build:
    name: Build â†’ ${{ matrix.name }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux (x86_64)
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          # TODO: Enable ARM64 build once OpenSSL issue is resolved.
          # - name: Linux (ARM64)
          #   os: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          - name: macOS (Apple Silicon)
            os: macos-14
            target: aarch64-apple-darwin
    
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.target }}
      # Skip cache when running locally with act to avoid caching issues
      - uses: Swatinem/rust-cache@v2
        if: ${{ !env.ACT }}
      - name: Setup multiarch for ARM64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt-get update
      - name: Install OpenSSL for ARM64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get install -y pkg-config gcc-aarch64-linux-gnu libssl-dev:arm64
      - name: Set OpenSSL env vars for ARM64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "OPENSSL_DIR=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: Test
        run: cargo test --workspace --target ${{ matrix.target }}
