name: ci

on: [push, pull_request]

jobs:
  # Code quality checks only need to run once
  check:
    name: Lints & Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy
      # Skip cache when running locally with act to avoid caching issues
      - uses: Swatinem/rust-cache@v2
        if: ${{ !env.ACT }}
      - run: cargo fmt --all -- --check
      - run: cargo clippy --all-targets -- -D warnings

  # Build and test across multiple platforms
  build:
    name: Build → ${{ matrix.name }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux (x86_64)
            os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
          - name: Linux (ARM64)
            os: ubuntu-24.04
            target: aarch64-unknown-linux-gnu
          - name: macOS (Apple Silicon)
            os: macos-14
            target: aarch64-apple-darwin
    
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.target }}
      # Skip cache when running locally with act to avoid caching issues
      - uses: Swatinem/rust-cache@v2
        if: ${{ !env.ACT }}
      - name: Add arm64 repos and update
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          set -eux
          sudo dpkg --add-architecture arm64

          # patch every source file – no duplicates, no arm64 leak
          sudo find /etc/apt \( -name '*.list' -o -name '*.sources' \) -type f -print0 |
            sudo xargs -0 sed -Ei \
              -e '/^deb /{s/\[.*\]/[arch=amd64]/;t;s/^deb /deb [arch=amd64] /}' \
              -e '/^Architectures:/s/.*/Architectures: amd64/'

          # Comment‑out the mirrorlist entries that still point at security.ubuntu.com
          sudo sed -i '/security\.ubuntu\.com/ s/^/# /' /etc/apt/apt-mirrors.txt

          # Drop Microsoft repos since the above command broke them
          # and they are not needed for the build
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list

          sudo rm -rf /var/lib/apt/lists/*        # purge stale indices

          # add the ports mirror for arm64
          REL=$(lsb_release -cs)
          sudo tee /etc/apt/sources.list.d/ports-arm64.list <<EOF
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $REL main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $REL-updates main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $REL-backports main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports $REL-security main restricted universe multiverse
          EOF

          sudo apt-get update
          sudo apt-get install --yes --no-install-recommends \
              crossbuild-essential-arm64 \  # meta-package
              pkg-config \
              libssl-dev:arm64
      - name: Set OpenSSL env vars for ARM64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "OPENSSL_DIR=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: Test
        run: cargo test --workspace --target ${{ matrix.target }}
